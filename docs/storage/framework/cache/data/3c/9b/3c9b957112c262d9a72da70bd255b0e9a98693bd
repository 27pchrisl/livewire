9999999999s:5863:"<h1>
<a id="user-content-css-transitions" class="anchor" href="#css-transitions" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>CSS Transitions</h1>
<h2>
<a id="user-content-simple-fade-transition" class="anchor" href="#simple-fade-transition" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Simple fade transition</h2>
<p>One of the benefits of using Livewire is utilizing familiar backend functionality like Blade, while making smooth front-ends. Livewire provides a simple CSS Transition system to help acheive this effect.</p>
<p>Livewire provides a basic "fade" transition out-of-the-box.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    [<span class="pl-k">...</span>]</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">@</span><span class="pl-k">if</span>(<span class="pl-smi">$showConfirmationModal</span>)</span>
<span class="pl-s1">        <span class="pl-k">&lt;</span><span class="pl-c1">div</span> <span class="pl-c1">wire</span>:<span class="pl-c1">transition</span><span class="pl-k">.</span><span class="pl-c1">fade</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">            [<span class="pl-k">...</span>]</span>
<span class="pl-s1">        <span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    <span class="pl-k">@</span><span class="pl-k">endif</span></span>
<span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span></pre></div>
<p>When <code>$showConfirmationModal</code> is <code>true</code>, it's contents are shown. When <code>$showConfirmationModal</code> becomes <code>false</code>, the contents will fade out, rather than dissapear instantly.</p>
<p>You can control the length of this fade by adding an additional time modifier. The following directive will cause the element to fade in and out for a duration of one second.</p>
<p><code>wire:transition.fade.1s</code></p>
<div title="Warning"><div title="Warning__content">
<p>If your element isn't transitioning in and out as expected, it's possible Livewire is having a hard time keeping track of it. In those cases, add a unique <code>key</code> attribute to the element like so:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-c1">div</span> <span class="pl-c1">wire</span>:<span class="pl-c1">transition</span><span class="pl-k">.</span><span class="pl-c1">fade</span> <span class="pl-c1">key</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>unique-key<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span></span></pre></div>
</div></div>
<h2>
<a id="user-content-custom-transitions" class="anchor" href="#custom-transitions" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Custom transitions</h2>
<p>Livewire provides a convenient system for performing more advanced transitions.</p>
<p>Let's say we want to add a "fade in and out" transition to a confirmation modal in our component. To achieve this, we need to first declare the transition in our view using Livewire's <code>wire:transition</code> directive.</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    <span class="pl-k">@</span><span class="pl-k">if</span>(<span class="pl-smi">$showConfirmationModal</span>)</span>
<span class="pl-s1">        <span class="pl-k">&lt;</span><span class="pl-c1">div</span> <span class="pl-c1">wire</span>:<span class="pl-c1">transition</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>fade<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">            <span class="pl-k">...</span></span>
<span class="pl-s1">        <span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    <span class="pl-k">@</span><span class="pl-k">endif</span></span>
<span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span></pre></div>
<p>Now, we need to provide the appropriate CSS selectors in our app's stylesheet for this transition:</p>
<div class="highlight highlight-source-css"><pre><span class="pl-e">.fade-enter-active</span>, <span class="pl-e">.fade-leave-active</span> {
  <span class="pl-c1"><span class="pl-c1">transition</span></span>: opacity <span class="pl-c1">.2<span class="pl-k">s</span></span>;
}

<span class="pl-e">.fade-enter</span>, <span class="pl-e">.fade-leave</span> {
  <span class="pl-c1"><span class="pl-c1">opacity</span></span>: <span class="pl-c1">0</span>;
}</pre></div>
<p>As you can see, Livewire applies the following four classes to the component at different times before adding or removing the element from the page:</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>.[transition]-enter</td>
<td>is added at the beginning of the transition-in phase, and removed one frame after</td>
</tr>
<tr>
<td>.[transition]-enter-active</td>
<td>is added during the entire transition-in phase</td>
</tr>
<tr>
<td>.[transition]-leave-active</td>
<td>is added during the entire transition-out phase</td>
</tr>
<tr>
<td>.[transition]-leave-to</td>
<td>is added one frame after the transition-out phase begins</td>
</tr>
</tbody>
</table>
";