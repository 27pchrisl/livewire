9999999999s:8790:"<h1>
<a id="user-content-event-actions" class="anchor" href="#event-actions" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Event Actions</h1>
<p>Livewire currently offers a handful of directives to make listening to browser events trivial. The common format for all of them is: <code>wire:[event]="[action]"</code>.</p>
<p>Here are some common events you may need to listen for:</p>
<table>
<thead>
<tr>
<th>Event</th>
<th>Directive</th>
</tr>
</thead>
<tbody>
<tr>
<td>click</td>
<td><code>wire:click</code></td>
</tr>
<tr>
<td>keydown</td>
<td><code>wire:keydown</code></td>
</tr>
<tr>
<td>submit</td>
<td><code>wire:submit</code></td>
</tr>
</tbody>
</table>
<p>Here are a few examples of each in HTML:</p>
<p><strong>click</strong></p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">button</span> <span class="pl-e">wire:click</span>=<span class="pl-s"><span class="pl-pds">"</span>showModal<span class="pl-pds">"</span></span>&gt;Show Modal&lt;/<span class="pl-ent">button</span>&gt;</pre></div>
<p><strong>keydown</strong></p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">input</span> <span class="pl-e">wire:keydown.enter</span>=<span class="pl-s"><span class="pl-pds">"</span>search<span class="pl-pds">"</span></span>&gt;</pre></div>
<p><strong>submit</strong></p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">form</span> <span class="pl-e">wire:submit</span>=<span class="pl-s"><span class="pl-pds">"</span>addTodo<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">input</span> <span class="pl-e">wire:model</span>=<span class="pl-s"><span class="pl-pds">"</span>title<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">button</span>&gt;Add Todo&lt;/<span class="pl-ent">button</span>&gt;
&lt;/<span class="pl-ent">form</span>&gt;</pre></div>
<h2>
<a id="user-content-modifiers" class="anchor" href="#modifiers" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Modifiers</h2>
<p>Like you saw in the <strong>keydown</strong> example, Livewire directives sometimes offer "modifiers" to add extra functionality to an event. Below are the available modifiers that can be used with any event:</p>
<table>
<thead>
<tr>
<th>Modifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>stop</td>
<td>Equivelant of <code>event.stopPropogation()</code>
</td>
</tr>
<tr>
<td>prevent</td>
<td>Equivelant of <code>event.preventDefault()</code>
</td>
</tr>
</tbody>
</table>
<h2>
<a id="user-content-keydown-modifiers" class="anchor" href="#keydown-modifiers" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Keydown Modifiers</h2>
<p>To listen for specific keys on <strong>keydown</strong> events, you can pass the name of the key as a modifier. You can directly use any valid key names exposed via <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values" rel="nofollow">KeyboardEvent.key</a> as modifiers by converting them to kebab-case.</p>
<p>Here is a quick list of some common ones you may need:</p>
<table>
<thead>
<tr>
<th>Browser Event</th>
<th>Livewire Modifier</th>
</tr>
</thead>
<tbody>
<tr>
<td>Backspace</td>
<td>backspace</td>
</tr>
<tr>
<td>Escape</td>
<td>escape</td>
</tr>
<tr>
<td>Shift</td>
<td>shift</td>
</tr>
<tr>
<td>Tab</td>
<td>tab</td>
</tr>
<tr>
<td>ArrowRight</td>
<td>arrow-right</td>
</tr>
</tbody>
</table>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">input</span> <span class="pl-e">wire:keydown.page-down</span>=<span class="pl-s"><span class="pl-pds">"</span>someAction<span class="pl-pds">"</span></span>&gt;</pre></div>
<p>In the above example, the handler will only be called if <code>event.key</code> is equal to 'PageDown'.</p>
<h2>
<a id="user-content-special-actions" class="anchor" href="#special-actions" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Special Actions</h2>
<p>In Livewire, there are some "special" actions that are usually prefixed with a "$" symbol:</p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>$set(<em>property</em>, <em>value</em>)</td>
<td>Shortcut to update the value of a property</td>
</tr>
<tr>
<td>$toggle(<em>property</em>)</td>
<td>Shortcut to toggle boolean properties on or off</td>
</tr>
<tr>
<td>$refresh</td>
<td>Will re-render the component without firing any action</td>
</tr>
</tbody>
</table>
<p>You can pass these as the value of an event listener to do special things in Livewire.</p>
<p>Let's take <code>$set()</code> for example. It can be used to manually set a component property's value. Consider the <code>Counter</code> component's view.</p>
<p><strong>Before</strong></p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    {{ <span class="pl-smi">$count</span> }}</span>
<span class="pl-s1">    <span class="pl-k">&lt;</span><span class="pl-c1">button</span> <span class="pl-c1">wire</span>:<span class="pl-c1">click</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>increment<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span><span class="pl-k">+</span><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">button</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    <span class="pl-k">&lt;</span><span class="pl-c1">button</span> <span class="pl-c1">wire</span>:<span class="pl-c1">click</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>decrement<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span><span class="pl-k">-</span><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">button</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span></pre></div>
<p><strong>After</strong></p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    {{ <span class="pl-smi">$count</span> }}</span>
<span class="pl-s1">    <span class="pl-k">&lt;</span><span class="pl-c1">button</span> <span class="pl-c1">wire</span>:<span class="pl-c1">click</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$set</span>('count', {{ <span class="pl-smi">$count</span> + 1 }})<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span><span class="pl-k">+</span><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">button</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1">    <span class="pl-k">&lt;</span><span class="pl-c1">button</span> <span class="pl-c1">wire</span>:<span class="pl-c1">click</span><span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-smi">$set</span>('count', {{ <span class="pl-smi">$count</span> - 1 }})<span class="pl-pds">"</span></span><span class="pl-k">&gt;</span><span class="pl-k">-</span><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">button</span><span class="pl-k">&gt;</span></span>
<span class="pl-s1"><span class="pl-k">&lt;</span><span class="pl-k">/</span><span class="pl-c1">div</span><span class="pl-k">&gt;</span></span></pre></div>
<p>Notice that we are no longer calling the <code>increment</code> and <code>decrement</code> functions, we are direcly specifying, in blade, what we want data set to.</p>
<p>This can save on lots of redundant, one-line component methods that only exist to set, or toggle the value of component property.</p>
<h2>
<a id="user-content-polling-actions" class="anchor" href="#polling-actions" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Polling Actions</h2>
<p>Livewire offers a directive called <code>wire:interval="someAction"</code> that, when added to an element, will fire <code>someAction</code> to the Livewire component every <code>500ms</code>. You can customize the frequency by passing a directive modifier like <code>250ms</code>. For example:</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span> <span class="pl-e">wire:interval.150ms</span>=<span class="pl-s"><span class="pl-pds">"</span>$refresh<span class="pl-pds">"</span></span>&gt;
    Current time: {{ now() }}
&lt;/<span class="pl-ent">div</span>&gt;</pre></div>
";