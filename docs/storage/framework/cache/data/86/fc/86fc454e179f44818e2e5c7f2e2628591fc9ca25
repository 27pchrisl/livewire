9999999999s:11550:"<h1>
<a id="user-content-component-basics" class="anchor" href="#component-basics" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Component Basics</h1>
<h2>
<a id="user-content-the-render-method" class="anchor" href="#the-render-method" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>The render() method</h2>
<p>There are two things to know:</p>
<ol>
<li>It should return a plain-old Blade view</li>
<li>It runs every time the component updates</li>
</ol>
<h3>
<a id="user-content-returning-blade" class="anchor" href="#returning-blade" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Returning Blade</h3>
<p>The <code>render()</code> method is expected to return a Blade view, therefore, you can compare it to writing a controller method. Here is an example:</p>
<div title="Component">
<div title="Component__class">
<p>ShowPosts.php</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ShowPosts</span> <span class="pl-k">extends</span> <span class="pl-e">LivewireComponent</span></span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">render</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> view(<span class="pl-s"><span class="pl-pds">'</span>livewire.show-posts<span class="pl-pds">'</span></span>, [</span>
<span class="pl-s1">            <span class="pl-s"><span class="pl-pds">'</span>posts<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-c1">Post</span><span class="pl-k">::</span>all();</span>
<span class="pl-s1">        ]);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">}</span></pre></div>
</div>
<div title="Component__view">
<p>show-posts.blade.php</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span>&gt;
    @foreach ($posts as $post)
        @include('includes.post', $post)
    @endforeach
&lt;/<span class="pl-ent">div</span>&gt;</pre></div>
</div>
</div>
<div title="Warning"><div title="Warning__content">
<p>Although <code>render()</code> methods closely resemble controller methods, there are a few techniques you are used to using in controllers that aren't available in Livewire components.</p>
<p>Here are some common things you might forget ARE NOT possible in Livewire:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">render</span>()</span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">return</span> redirect()<span class="pl-k">-&gt;</span>to(<span class="pl-s"><span class="pl-pds">'</span>/endpoint<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    <span class="pl-c"><span class="pl-c">//</span> Or</span></span>
<span class="pl-s1">    <span class="pl-k">return</span> back();</span>
<span class="pl-s1">    <span class="pl-c"><span class="pl-c">//</span> Or</span></span>
<span class="pl-s1">    <span class="pl-k">return</span> [<span class="pl-s"><span class="pl-pds">'</span>some<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>data<span class="pl-pds">'</span></span>];</span>
<span class="pl-s1">}</span></pre></div>
</div></div>
<h2>
<a id="user-content-component-properties" class="anchor" href="#component-properties" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Component Properties</h2>
<p>Livewire components store and track state using class properties on the Component class. Here's what's important to know:</p>
<h3>
<a id="user-content-autmatically-available-inside-view" class="anchor" href="#autmatically-available-inside-view" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Autmatically Available Inside View</h3>
<p>Properties marked as <code>public</code> are automatically made available in the Blade view. For example:</p>
<div title="Component">
<div title="Component__class">
<p>HelloWorld.php</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">HelloWorld</span> <span class="pl-k">extends</span> <span class="pl-e">LivewireComponent</span></span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-smi">$message</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>Hello World<span class="pl-pds">'</span></span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">render</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-c"><span class="pl-c">//</span> Notice we aren't passing "$message" into the view.</span></span>
<span class="pl-s1">        <span class="pl-k">return</span> view(<span class="pl-s"><span class="pl-pds">'</span>livewire.hello-world<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">}</span></pre></div>
</div>
<div title="Component__view">
<p>hello-world.blade.php</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span>&gt;
    &lt;<span class="pl-ent">h1</span>&gt;{{ $message }}&lt;/<span class="pl-ent">h1</span>&gt;
    <span class="pl-c"><span class="pl-c">&lt;!--</span> "Hello World" <span class="pl-c">--&gt;</span></span>
&lt;/<span class="pl-ent">div</span>&gt;</pre></div>
</div>
</div>
<h3>
<a id="user-content-initializing-properties" class="anchor" href="#initializing-properties" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Initializing Properties</h3>
<p>Let's say you wanted to make the 'Hello World' message more specific, and greet the currently logged in user. You might try setting the message to:</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">public</span> <span class="pl-smi">$message</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>Hello <span class="pl-pds">'</span></span> <span class="pl-k">.</span> auth()<span class="pl-k">-&gt;</span>user()<span class="pl-k">-&gt;</span><span class="pl-smi">first_name</span>;</span></pre></div>
<p>Unfortunately, this is illegal in PHP. However, you can initialize properties at run-time using the <code>created</code> method/hook in Livewire. For example:</p>
<div title="Component">
<div title="Component__class">
<p>HelloWorld.php</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">HelloWorld</span> <span class="pl-k">extends</span> <span class="pl-e">LivewireComponent</span></span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-smi">$message</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">created</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">message</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>Hello <span class="pl-pds">'</span></span> <span class="pl-k">.</span> auth()<span class="pl-k">-&gt;</span>user()<span class="pl-k">-&gt;</span><span class="pl-smi">first_name</span>;</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">render</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> view(<span class="pl-s"><span class="pl-pds">'</span>livewire.hello-world<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">}</span></pre></div>
</div>
<div title="Component__view">
<p>hello-world.blade.php</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span>&gt;
    &lt;<span class="pl-ent">h1</span>&gt;{{ $message }}&lt;/<span class="pl-ent">h1</span>&gt;
    <span class="pl-c"><span class="pl-c">&lt;!--</span> "Hello Alex" <span class="pl-c">--&gt;</span></span>
&lt;/<span class="pl-ent">div</span>&gt;</pre></div>
</div>
</div>
<h2>
<a id="user-content-redirecting" class="anchor" href="#redirecting" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Redirecting</h2>
<p>You may want to redirect from inside a Livewire component to another route in your app. Livewire offers a simple <code>$this-&gt;redirect()</code> method to accomplish this:</p>
<div title="Component">
<div title="Component__class">
<p>ContactForm.php</p>
<div class="highlight highlight-text-html-php"><pre><span class="pl-s1"><span class="pl-k">class</span> <span class="pl-en">ContactForm</span> <span class="pl-k">extends</span> <span class="pl-e">LivewireComponent</span></span>
<span class="pl-s1">{</span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-smi">$email</span>;</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">addContact</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-c1">Contact</span><span class="pl-k">::</span>create([<span class="pl-s"><span class="pl-pds">'</span>email<span class="pl-pds">'</span></span> <span class="pl-k">=&gt;</span> <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span><span class="pl-smi">email</span>]);</span>
<span class="pl-s1"></span>
<span class="pl-s1">        <span class="pl-smi">$this</span><span class="pl-k">-&gt;</span>redirect(<span class="pl-s"><span class="pl-pds">'</span>/contact-form-success<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1"></span>
<span class="pl-s1">    <span class="pl-k">public</span> <span class="pl-k">function</span> <span class="pl-en">render</span>()</span>
<span class="pl-s1">    {</span>
<span class="pl-s1">        <span class="pl-k">return</span> view(<span class="pl-s"><span class="pl-pds">'</span>livewire.contact-form<span class="pl-pds">'</span></span>);</span>
<span class="pl-s1">    }</span>
<span class="pl-s1">}</span></pre></div>
</div>
<div title="Component__view">
<p>contact-form.blade.php</p>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span>&gt;
    Email: &lt;<span class="pl-ent">input</span> <span class="pl-e">wire:model</span>=<span class="pl-s"><span class="pl-pds">"</span>email<span class="pl-pds">"</span></span>&gt;

    &lt;<span class="pl-ent">button</span> <span class="pl-e">wire:click</span>=<span class="pl-s"><span class="pl-pds">"</span>addContact<span class="pl-pds">"</span></span>&gt;Submit&lt;/<span class="pl-ent">button</span>&gt;
&lt;/<span class="pl-ent">div</span>&gt;</pre></div>
</div>
</div>
<p>Now, after the user clicks "Submit" and their contact is added to the database, they will be redirected to the success page (<code>/contact-form-success</code>).</p>
";